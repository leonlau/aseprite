name: compiling
on: 
  workflow_dispatch:
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest] #[windows-latest, macos-latest, ubuntu-latest]
        build_type: [Release] #[RelWithDebInfo, Debug]
        enable_ui: [on]
        # include:
        #   - os: ubuntu-latest
        #     build_type: Debug
        #     enable_ui: on
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'
    # - name: ccache
    #   uses: hendrikmuhs/ccache-action@v1
    #   if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
    #   with:
    #     key: ${{ matrix.os }}-${{ matrix.enable_ui }}-${{ matrix.build_type }}
    - uses: turtlesec-no/get-ninja@main
    # - uses: ilammy/msvc-dev-cmd@v1
    #   if: runner.os == 'Windows'
    # - name: Workaround for windows-2022 and cmake 3.25.0
    #   if: runner.os == 'Windows'
    #   shell: bash
    #   run: rm -rf C:/Strawberry/
    - name: Install Dependencies
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]] ; then
          sudo apt-get update -qq
          sudo apt-get install -y \
            libx11-dev libxcursor-dev libxi-dev
          sudo apt-get install -y g++ clang libc++-dev libc++abi-dev cmake ninja-build libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev unzip 
        fi
        if [[ "${{ runner.os }}" == "macOS" ]] ; then
        curl -L https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-macOS-Release-x64.zip --output /tmp/skia.zip 
        unzip -d $HOME/deps/skia /tmp/skia.zip
        fi      
    - name: Generating Makefiles
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          export enable_ccache=off
        else
          export enable_ccache=on
        fi
        if [[ "${{ runner.os }}" == "macOS" ]] ; then
        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DENABLE_UI=${{ matrix.enable_ui }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
          -DCMAKE_OSX_SYSROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk \
          -DLAF_BACKEND=skia \
          -DSKIA_DIR=$HOME/deps/skia \
          -DSKIA_LIBRARY_DIR=$HOME/deps/skia/out/Release-x64 \
          -DSKIA_LIBRARY=$HOME/deps/skia/out/Release-x64/libskia.a \
          -G Ninja \
          ..
        fi
    - name: Compiling
      shell: bash
      run: |
        cd build && ninja
        export ASEPRITE=$PWD/build/bin/
    # - name: Running C++ Tests
    #   shell: bash
    #   run: |
    #     if [[ "${{ runner.os }}" == "Linux" ]] ; then
    #       export XVFB=xvfb-run
    #     fi
    #     cd build && $XVFB ctest --output-on-failure
    # - name: Running CLI Tests
    #   shell: bash
    #   run: |
    #     if [[ "${{ runner.os }}" == "Linux" ]] ; then
    #       export XVFB=xvfb-run
    #     fi
    #     export ASEPRITE=$PWD/build/bin/aseprite
    #     cd tests
    #     $XVFB bash run-tests.sh
    - name: upload-build-file
      uses: actions/upload-artifact@v3
      with:
        name: build_Aseprite
        path: build/bin/aseprite